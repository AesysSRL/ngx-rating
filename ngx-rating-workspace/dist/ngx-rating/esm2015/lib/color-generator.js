export function getColorScale(items) {
    if (!checkIntegrity(items)) {
        console.error("ALL RGB VALUES MUST BE BETWEEN 0 AND 255");
        return items.map(item => {
            return Object.assign(Object.assign({}, item), { color: getColor(255, 0, 0) });
        });
    }
    if (!items[0].color) {
        console.error("SET FIRST ITEM'S COLOR FIELD");
        let toReturn = items;
        toReturn[0].color = getColor(255, 0, 0);
    }
    if (items[0].color && !items[items.length - 1].color) {
        const color = items[0].color;
        return items.map(item => { return Object.assign(Object.assign({}, item), { color: color }); });
    }
    else {
        let toReturn = [items[0]];
        while (toReturn.length !== items.length) {
            let toCalculate = [];
            let first = toReturn[toReturn.length - 1].color || {};
            for (let i = toReturn.length; !items[i].color && i < items.length; i++) {
                toCalculate.push(items[i]);
            }
            let last = items[toReturn.length + toCalculate.length].color || {};
            toReturn = toReturn.concat(calculateColors(first, last, toCalculate));
            toReturn.push(items[toReturn.length]);
        }
        return toReturn;
    }
}
function getColor(red, green, blue) {
    return {
        red: red,
        green: green,
        blue: blue
    };
}
function calculateColors(first, last, items) {
    const difference = getColor(last.red - first.red, last.green - first.green, last.blue - first.blue);
    return items.map((item, idx) => {
        return Object.assign(Object.assign({}, item), { color: getColor(first.red + ((difference.red / (items.length + 1)) * (idx + 1)), first.green + ((difference.green / (items.length + 1)) * (idx + 1)), first.blue + ((difference.blue / (items.length + 1)) * (idx + 1))) });
    });
}
export function toColorString(color) {
    return `rgb(${color.red},${color.green},${color.blue})`;
}
function checkIntegrity(items) {
    let integrity = true;
    items.forEach(item => {
        if (item.color) {
            if (!checkItem(item.color)) {
                integrity = false;
            }
        }
    });
    return integrity;
}
function checkItem(color) {
    if (color.red < 0 || color.red > 255) {
        return false;
    }
    if (color.green < 0 || color.green > 255) {
        return false;
    }
    if (color.blue < 0 || color.blue > 255) {
        return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXJhdGluZy9zcmMvbGliL2NvbG9yLWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQWE7SUFFekMsSUFBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBQztRQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDMUQsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RCLHVDQUNLLElBQUksS0FDUCxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQzNCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELElBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM5QyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDckIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN6QztJQUNELElBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTtRQUNqRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzdCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFFLHVDQUFXLElBQUksS0FBRSxLQUFLLEVBQUUsS0FBSyxJQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7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QyxFQUFFO1FBQ25CLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLElBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ25CO1NBQ0Y7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFZO0lBQzdCLElBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUM7UUFDbEMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELElBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUM7UUFDdEMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELElBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUM7UUFDcEMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbG9yLCBJdGVtIH0gZnJvbSBcIi4vbW9kZWxcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvclNjYWxlKGl0ZW1zOiBJdGVtW10pOiBJdGVtW10ge1xyXG5cclxuICBpZighY2hlY2tJbnRlZ3JpdHkoaXRlbXMpKXtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJBTEwgUkdCIFZBTFVFUyBNVVNUIEJFIEJFVFdFRU4gMCBBTkQgMjU1XCIpO1xyXG4gICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5pdGVtLFxyXG4gICAgICAgIGNvbG9yOiBnZXRDb2xvcigyNTUsIDAsIDApXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYoIWl0ZW1zWzBdLmNvbG9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiU0VUIEZJUlNUIElURU0nUyBDT0xPUiBGSUVMRFwiKTtcclxuICAgIGxldCB0b1JldHVybiA9IGl0ZW1zO1xyXG4gICAgdG9SZXR1cm5bMF0uY29sb3IgPSBnZXRDb2xvcigyNTUsIDAsIDApO1xyXG4gIH1cclxuICBpZihpdGVtc1swXS5jb2xvciAmJiAhaXRlbXNbaXRlbXMubGVuZ3RoLTFdLmNvbG9yKSB7XHJcbiAgICBjb25zdCBjb2xvciA9IGl0ZW1zWzBdLmNvbG9yO1xyXG4gICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtyZXR1cm4gey4uLml0ZW0sIGNvbG9yOiBjb2xvcn19KTtcclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IHRvUmV0dXJuOiBJdGVtW10gPSBbaXRlbXNbMF1dO1xyXG4gICAgd2hpbGUodG9SZXR1cm4ubGVuZ3RoICE9PSBpdGVtcy5sZW5ndGgpIHtcclxuICAgICAgbGV0IHRvQ2FsY3VsYXRlID0gW107XHJcbiAgICAgIGxldCBmaXJzdDogQ29sb3IgPSB0b1JldHVyblt0b1JldHVybi5sZW5ndGggLSAxXS5jb2xvciB8fCB7fSBhcyBDb2xvcjtcclxuICAgICAgZm9yKGxldCBpID0gdG9SZXR1cm4ubGVuZ3RoOyAhaXRlbXNbaV0uY29sb3IgJiYgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdG9DYWxjdWxhdGUucHVzaChpdGVtc1tpXSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGxhc3Q6IENvbG9yID0gaXRlbXNbdG9SZXR1cm4ubGVuZ3RoICsgdG9DYWxjdWxhdGUubGVuZ3RoXS5jb2xvciAgfHwge30gYXMgQ29sb3I7XHJcbiAgICAgIHRvUmV0dXJuID0gdG9SZXR1cm4uY29uY2F0KGNhbGN1bGF0ZUNvbG9ycyhmaXJzdCwgbGFzdCwgdG9DYWxjdWxhdGUpKTtcclxuICAgICAgdG9SZXR1cm4ucHVzaChpdGVtc1t0b1JldHVybi5sZW5ndGhdKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0b1JldHVybjtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbG9yKHJlZDogbnVtYmVyLCBncmVlbjogbnVtYmVyLCBibHVlOiBudW1iZXIpOiBDb2xvciB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlZDogcmVkLFxyXG4gICAgZ3JlZW46IGdyZWVuLFxyXG4gICAgYmx1ZTogYmx1ZVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlQ29sb3JzKGZpcnN0OiBDb2xvciwgbGFzdDogQ29sb3IsIGl0ZW1zOiBJdGVtW10pOiBJdGVtW10ge1xyXG4gIGNvbnN0IGRpZmZlcmVuY2UgPSBnZXRDb2xvcihcclxuICAgIGxhc3QucmVkIC0gZmlyc3QucmVkLFxyXG4gICAgbGFzdC5ncmVlbiAtIGZpcnN0LmdyZWVuLFxyXG4gICAgbGFzdC5ibHVlIC0gZmlyc3QuYmx1ZVxyXG4gICk7XHJcbiAgcmV0dXJuIGl0ZW1zLm1hcCgoaXRlbSwgaWR4KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5pdGVtLFxyXG4gICAgICBjb2xvcjogZ2V0Q29sb3IoXHJcbiAgICAgICAgZmlyc3QucmVkICsgKChkaWZmZXJlbmNlLnJlZC8oaXRlbXMubGVuZ3RoKzEpKSooaWR4KzEpKSxcclxuICAgICAgICBmaXJzdC5ncmVlbiArICgoZGlmZmVyZW5jZS5ncmVlbi8oaXRlbXMubGVuZ3RoKzEpKSooaWR4KzEpKSxcclxuICAgICAgICBmaXJzdC5ibHVlICsgKChkaWZmZXJlbmNlLmJsdWUvKGl0ZW1zLmxlbmd0aCsxKSkqKGlkeCsxKSlcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9Db2xvclN0cmluZyhjb2xvcjogQ29sb3IpOiBzdHJpbmcge1xyXG4gIHJldHVybiBgcmdiKCR7Y29sb3IucmVkfSwke2NvbG9yLmdyZWVufSwke2NvbG9yLmJsdWV9KWA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrSW50ZWdyaXR5KGl0ZW1zOiBJdGVtW10pOiBib29sZWFuIHtcclxuICBsZXQgaW50ZWdyaXR5ID0gdHJ1ZTtcclxuICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgaWYoaXRlbS5jb2xvcikge1xyXG4gICAgICBpZighY2hlY2tJdGVtKGl0ZW0uY29sb3IpKSB7XHJcbiAgICAgICAgaW50ZWdyaXR5ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGludGVncml0eTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tJdGVtKGNvbG9yOiBDb2xvcik6IGJvb2xlYW4ge1xyXG4gIGlmKGNvbG9yLnJlZCA8IDAgfHwgY29sb3IucmVkID4gMjU1KXtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgaWYoY29sb3IuZ3JlZW4gPCAwIHx8IGNvbG9yLmdyZWVuID4gMjU1KXtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgaWYoY29sb3IuYmx1ZSA8IDAgfHwgY29sb3IuYmx1ZSA+IDI1NSl7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iXX0=